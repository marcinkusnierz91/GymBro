// <auto-generated />
using System;
using GymBro.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GymBro.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240330154805_ExerciseSeriesAccesGivenToTraining")]
    partial class ExerciseSeriesAccesGivenToTraining
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GymBro.Models.ExerciseModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExerciseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExerciseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TrainingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrainingId");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("GymBro.Models.ExerciseSeriesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<int>("Repetitions")
                        .HasColumnType("int");

                    b.Property<int>("SeriesAmount")
                        .HasColumnType("int");

                    b.Property<int>("SeriesNumber")
                        .HasColumnType("int");

                    b.Property<int?>("TrainingModelId")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("TrainingModelId");

                    b.ToTable("ExercisesSeries");
                });

            modelBuilder.Entity("GymBro.Models.RepetitionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ExerciseSeriesId")
                        .HasColumnType("int");

                    b.Property<int>("RepetitionsAmount")
                        .HasColumnType("int");

                    b.Property<int>("SeriesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseSeriesId");

                    b.ToTable("Repetitions");
                });

            modelBuilder.Entity("GymBro.Models.TrainingModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("TrainingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Trainings");
                });

            modelBuilder.Entity("GymBro.Models.UserModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date_created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Last_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GymBro.Models.ExerciseModel", b =>
                {
                    b.HasOne("GymBro.Models.TrainingModel", "Training")
                        .WithMany("Exercises")
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Training");
                });

            modelBuilder.Entity("GymBro.Models.ExerciseSeriesModel", b =>
                {
                    b.HasOne("GymBro.Models.ExerciseModel", "Exercise")
                        .WithMany("ExerciseSeries")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymBro.Models.TrainingModel", null)
                        .WithMany("ExerciseSeries")
                        .HasForeignKey("TrainingModelId");

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("GymBro.Models.RepetitionModel", b =>
                {
                    b.HasOne("GymBro.Models.ExerciseSeriesModel", "ExerciseSeries")
                        .WithMany()
                        .HasForeignKey("ExerciseSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExerciseSeries");
                });

            modelBuilder.Entity("GymBro.Models.TrainingModel", b =>
                {
                    b.HasOne("GymBro.Models.UserModel", "User")
                        .WithMany("Trainings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GymBro.Models.ExerciseModel", b =>
                {
                    b.Navigation("ExerciseSeries");
                });

            modelBuilder.Entity("GymBro.Models.TrainingModel", b =>
                {
                    b.Navigation("ExerciseSeries");

                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("GymBro.Models.UserModel", b =>
                {
                    b.Navigation("Trainings");
                });
#pragma warning restore 612, 618
        }
    }
}
